---
# tasks file for deploy_appserver
- name: Include vars from vars directory
  include_vars:
    dir: vars
    extensions:
      - "yml"
      
- name: Checking docker setup of mysql
  ansible.builtin.shell:
    cmd: docker ps
  ignore_errors: yes
  register: mysql_docker_installation_details

- name: Check the existance of sample app database
  ansible.builtin.shell:
    cmd: docker exec -it mysql_docker mysql -u user -ppassword -e "show databases"
  register: mysql_db_list
  when: not mysql_docker_installation_details.failed
  ignore_errors: yes

- name: Checking the previledges owned by mysql user
  ansible.builtin.shell:
    cmd: docker exec -it mysql_docker mysql -u user -ppassword -e "show GRANTS;"
    # cmd: docker exec -it mysql_docker mysql -u user -ppassword -e "SELECT PRIVILEGE_TYPE FROM information_schema.USER_PRIVILEGES WHERE GRANTEE = '\'user\'@\'%\'';"
  register: previlege_details
  when: not mysql_docker_installation_details.failed
  ignore_errors: yes

- name: mysql container not found scenario, task execution
  block:
    - name: setting up mysql and required dbs, task execution
      block:
        - name: Starting mysql_docker container (if not already running)
          become: no  # it's a bash alias for the cloud-user profile. it wont be there for "root"
          ansible.builtin.shell:
            cmd: docker compose -f {{ docker_compose_file_directory }}/mysql_docker_compose.yml up -d

        - pause:
            seconds: 15

        - name: Create the db required for sample app only when it's not there
          ansible.builtin.shell:
            cmd:  docker exec -it mysql_docker mysql -u user -ppassword -e "CREATE DATABASE employee_app_db;"
          register: create_db_init_attempt_status
          ignore_errors: yes

        - name: Granting db create previleges (if not)
          ansible.builtin.shell:
            cmd: docker exec -it mysql_docker mysql -u root -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'user'@'%';"
          when: (create_db_init_attempt_status.failed | default(False)) and (not 'CREATE,' in previlege_details.stdout | default(True))  #and part is not so required if carefully looked into
          ignore_errors: yes

        - name: Create the db required for sample app retry
          ansible.builtin.shell:
            cmd:  docker exec -it mysql_docker mysql -u user -ppassword -e "CREATE DATABASE employee_app_db;"
          when: create_db_init_attempt_status.failed | default(False)
          ignore_errors: yes
      # when: "'mysql_docker' not in mysql_docker_installation_details.stdout"
      # when: not 'CREATE,' in previlege_details.stdout | default(True)
  when: not 'employee_app_db' in mysql_db_list.stdout | default(True)

- name: mysql container already running scenario, task execution
  block:
    - name: mysql docker container found prompt
      ansible.builtin.debug:
        msg: mysql is already running on docker!
      when: "'mysql_docker' in mysql_docker_installation_details.stdout"
  when: not mysql_docker_installation_details.failed

- name: mysql container details get status detail log
  ansible.builtin.debug:
    msg: Listing docker containers failed. Something wrong with docker installation
  when: mysql_docker_installation_details.failed
