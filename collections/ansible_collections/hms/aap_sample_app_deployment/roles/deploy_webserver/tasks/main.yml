---
# tasks file for deploy_webserver
- name: Include vars from vars directory
  include_vars:
    dir: vars
    extensions:
      - "yml"
      
- name: yum update
  ansible.builtin.shell: yum update -y

- name: Test npm existance
  ansible.builtin.shell: npm --version
  ignore_errors: yes
  register: npm_installation_details

- name: Adding node to dnf repo
  ansible.builtin.shell: dnf module enable nodejs:20 -y
  when: npm_installation_details.failed

- name: Install node
  ansible.builtin.shell: dnf install nodejs -y
  when: npm_installation_details.failed

- name: Check App source location existance
  ansible.builtin.stat:
    path: "{{ sample_app_src_dir }}"
  register: app_source_location_details

- name: Check App source location existance
  ansible.builtin.debug:
    var: app_source_location_details

- name: Create a location to save sample app
  ansible.builtin.file:
    path: "{{ sample_app_src_dir }}"
    state: directory
    mode: '0755' # Optional: Set permissions
  when: not (app_source_location_details.stat.isdir | default(False))  # this is not required. only if the folder is not present it will do it's work

# - name: Check sample app git repo existance
#   ansible.builtin.stat:
#     path: "{{ sample_app_src_dir }}/{{ sample_app_name }}"
#   register: sample_app_repo_details

# - name: Print a debug message
#   ansible.builtin.debug:
#     msg: "Path exists and is a directory"
#   when: p.stat.isdir is defined and p.stat.isdir

- name: Install git
  ansible.builtin.yum:
    name: git
    state: latest

# - name: Check the git tag of the sample app source
#   ansible.builtin.shell:
#     cmd: git status
#     chdir: "{{ sample_app_src_dir }}/{{ sample_app_name }}"
#   register: git_status_details
#   ignore_errors: yes

- name: Git clone the sample app, update and checkout
  ansible.builtin.git:
    repo: "{{ sample_app_git_repo }}"
    dest: "{{ sample_app_src_dir }}/{{ sample_app_name }}"
    clone: yes
    update: yes
    version: "{{ sample_app_version  | default('0.0.1')}}"

- name: Creating local env file needed for the dev mode run
  ansible.builtin.copy:
    src: ".env.local"
    dest: "{{ sample_app_src_dir }}/{{ sample_app_name }}/.env.local"

- name: Installing node dependancies for the sample application
  ansible.builtin.shell:
    cmd:  npm install
    chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

- name: Checking npm global install directory, for checking existance of pm2, dotenv
  ansible.builtin.shell:
    cmd: npm list -g
  register: npm_global_installs_details

- name: Installing global node dependancies
  ansible.builtin.shell:
    cmd: npm install -g dotenv-cli pm2
  when: "('dotenv-cli' or 'pm2') not in npm_global_installs_details.stdout"

- name: Running migration for sample application
  ansible.builtin.shell:
    cmd:  export PATH="$PATH:/usr/local/bin" && npm run migrate:dev
    chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

- name: Running db client build for the sample application
  ansible.builtin.shell:
    cmd:  export PATH="$PATH:/usr/local/bin" && npm run prisma:generate
    chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

- name: Create pm2 js file directory
  ansible.builtin.file:
    path: "{{ pm2_js_file_directory }}"
    state: directory
    mode: '0755'

- name: Copy pm2 ecosystem for running app
  ansible.builtin.copy:
    src: "ecosystem-employee-record-book.config.js"
    dest: "{{ pm2_js_file_directory }}"

- name: Check pm2 job list
  ansible.builtin.shell:
    cmd: |
      export PATH="$PATH:/usr/local/bin"
      pm2 list
  register: pm2_job_list_details

- name: Install log rotate lib for pm2
  ansible.builtin.shell:
    cmd: export PATH="$PATH:/usr/local/bin" && pm2 install pm2-logrotate
  when: "'pm2-logrotate' not in pm2_job_list_details.stdout"

- name: Setting up log rotate feature properties for pm2
  ansible.builtin.shell:
    cmd: |
      export PATH="$PATH:/usr/local/bin"
      pm2 set pm2-logrotate:max_size 10M
      pm2 set pm2-logrotate:retain 30
      pm2 set pm2-logrotate:compress true
  when: "'pm2-logrotate' not in pm2_job_list_details.stdout"

- name: Create the log folder structure
  ansible.builtin.file:
    path: "{{ pm2_js_logs_directory }}"
    state: directory
    mode: '0755'

- name: Run the Sample app with pm2
  ansible.builtin.shell:
    cmd: export PATH="$PATH:/usr/local/bin" && pm2 start ecosystem-employee-record-book.config.js
    chdir: "{{ pm2_js_file_directory }}"
